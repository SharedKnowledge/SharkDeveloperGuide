\chapter{Shark 3.0}
Shark is an open source project that is driven by a little team at a university with partners who work on actual applications. Have a look at www.sharksystem.net for more information.

Shark is used in projects. Each project has additional needs and requires additional functionality. Sometimes new custom functionality is worth to become a general framework function.

We have already identified two major enhancement which will be part of Shark 3.0.


\section{Public key infrastructure (PKI)}
Shark will get its own PKI. It already runs in our lab but wasn't tested enough to publish it. The general idea shall already be outlined, though.

Each peer will be able to create its own RSA key pair and then send its private key to another peer. The preferred way of public key exchange will be an ad-hoc network. Both persons see each others eyes and exchange key with their mobile phones.
Both can verify keys by fingerprints.

Keys can also be exchanged over larger distances by using other protocols. A fingerprint check is essential to ensure adding the right key.

Shark introduced the {\it trust level} which represents the number of peers that are between the key originator and the actual peer. A little example should illustrate the idea:

Alice creates a key pair and sends her public key directly to Bob. Of course, Bob has made all necessary fingerprint checks. Bob did not give Alice his public key. This key has actually the trust level 0. There is no peer between the originator Alice and the recipient Bob.

Imagine, Bob has already exchanged public keys with Clara. Their exchanged keys have the trust level 0 as well. Now, Bob might send Alice the public key of Clara. Clara would now have a public key of Alice, that was mediated by Bob. For Clara, the Alice key has the trust level 1 -- A single peer (Bob) mediated the key. Clara could send Alice's key to e.g. Daniel. He would have Alice's key with a trust level of two and so forth.

With that PKI, developers can define a minimum trust level which must be satisfied with peers to communicate. There might be applications who only accept a trust level 0 communication which means that each peer must know every other peer more or less personal. Of course, less secure applications will still be possible.

\section{Sub Space}
Shark supports only peer-to-peer communication which is not very surprising for a P2P system. Most distributed applications require a communication between a closed group of peers. Social networks are a good example.

There can be groups exchanging information in a chat or with a variant of drop box. SharkNet is such an application. It comes with a chat and a concept called {\it makan}\footnote{Makan means room in Arabic.} which has features of a drop box -- it allows exchanging documents in a closed user group.

Still, there is no server involved. Any information is exchanged between all peers. It requires a special kind of protocol to create such chats and makan. Furthermore, it requires additional communication to introduce peers to those makan, to subscribe, unsubscribe and to remove it.

Shark 3.0 will introduce a concept called {\it sub space} which provides methods for creating many different kinds of such cooperative work. The concept is pretty simple: A peer creates a new knowledge base which is the new {\it sub space}. 
A sub space comprises semantic tags and knowledge as usual.

The peer can introduces others to that sub space, though. Once a peer accepts an invitation it starts {\it sharing} the sub space. The result is pretty simple: Each new subscriber gets a copy of the subspace. Every subscriber is informed about the new subscriber. A sub space can have full subscribers and read-only subscribers. Full subscribers can also add information to the sub space. They simply add information with a context point.

The sub space automatically sends this new information to all subscribers. Note: There is no central entity. Any new information is submitted by the originator to every subscriber. 

Peers can unsubscribe which actually means that all other subscribers get informed that this peer isn't interested in that sub space any more.

A sub space has similarities with an intranet application but there is no central instance. Each peer holds his own copy.

Of course, their can be a hierarchy of visibility rights which is achieved by structuring sub space memberships accordingly. We will explain that concept in the next version of this documentation. We can just state: The sub space concept was created to substitute parts of an internal intranet application. Thus, it meets all requirements of professional and commercial information exchange with the whole security and privacy background which is state of the art in the 21. century.

\section{.. and beyond: Shark Longitude}
There are also plans to implement Shark Longitude (SL) which will mainly focus on Android phones.

SL will provide users to get their own GPS coordinates which is pretty simple with Android. SL will also help creating tracks. More important, SL will allow sharing those information with other peers. Finally, a group of peers will share points of interests, tracks and current positions of others. There are well-know
applications having similar features. However, Shark Longitude makes it in a P2P manner: There is no server keeping all trails and points of any user. There is no need to trust a server that keeps personal trails which constitute highly sensitive data in most cases.

SL synchronizes this data in a group of peers. They have to trust each other and nobody else.

Locations will be defined with Spatial Semantic Tags. We will introduce a very light version of a GIS into the systems. There will be a SL viewer of course which will be a mash up of the server based OSM data and the private P2P Shark data stored locally in the phones.

We cannot ensure that it will be already part of Shark 3.0. You are welcome to support these plans. Contact us!
